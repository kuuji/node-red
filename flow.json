[
    {
        "id": "95ab365c95ad6815",
        "type": "tab",
        "label": "Alex Idiot Sandwich flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ff8268c9a3c5d70",
        "type": "tab",
        "label": "Ask GPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0c34728bb51d9c58",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": true,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "3b77e42fb1341f12",
        "type": "inject",
        "z": "95ab365c95ad6815",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Alex is an idiot 2",
        "payloadType": "str",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "360e9df2bbad4c6c"
            ]
        ]
    },
    {
        "id": "b4fbf99066e14a4c",
        "type": "debug",
        "z": "95ab365c95ad6815",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "c7d9b95c6285b32f",
        "type": "function",
        "z": "95ab365c95ad6815",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "b4fbf99066e14a4c"
            ]
        ]
    },
    {
        "id": "360e9df2bbad4c6c",
        "type": "credentials",
        "z": "95ab365c95ad6815",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            }
        ],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "c7d9b95c6285b32f"
            ]
        ]
    },
    {
        "id": "fb068d3a16841160",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.gpt_go",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 220,
        "y": 240,
        "wires": [
            [
                "21b6cbe7eba5b130",
                "6eec0ae00cae6390"
            ]
        ]
    },
    {
        "id": "4bc328b347c9ed08",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "ha_states",
        "func": "\n\n\nconst response = await fetch(\"https://home.byeon.ca/api/states\", {\n    method: \"GET\",\n    headers: {\n        \"Authorization\": `Bearer ${msg.ha_token}`,\n        \"Content-Type\": \"application/json\"\n    }\n})\nconst states = await response.json();\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n\n\nmsg.states = states\nmsg.global = global.get(\"homeassistant\")\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 780,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "21b6cbe7eba5b130",
        "type": "credentials",
        "z": "6ff8268c9a3c5d70",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "b2d135aefbd1f5a9",
                "338303fff77665eb"
            ]
        ]
    },
    {
        "id": "b48c1344c84fefa9",
        "type": "debug",
        "z": "6ff8268c9a3c5d70",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 240,
        "wires": []
    },
    {
        "id": "b2d135aefbd1f5a9",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.gpt_history\"].state\nlet history = flow.get(\"history\")\nif (keep_history == \"off\" || !history){\n    history = [\n        { role: \"system\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_system_prompt\"].state },\n        { role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state }\n    ]\n} else {\n    if (history) {\n        history.push({ role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state })\n    }\n}\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history\n    });\n\n    history.push(completion.data.choices[0].message)\n    flow.set(\"history\", history)\n    node.status({});\n    msg.history = history\n    msg.keep_history = keep_history\n    msg.completion = completion    \n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 890,
        "y": 240,
        "wires": [
            [
                "09523ba8ab0cc3ed",
                "2549be45f1455a40"
            ]
        ]
    },
    {
        "id": "09523ba8ab0cc3ed",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "notification ha",
        "func": "\n\nlet markdownConversation = \"\";\n\nmsg.history.forEach(entry => {\n    if (entry.role === \"system\") {\n        markdownConversation += `## ${entry.content}\\n\\n`;\n    } else if (entry.role === \"user\") {\n        markdownConversation += `**User:** ${entry.content}\\n\\n`;\n    } else if (entry.role === \"assistant\") {\n        markdownConversation += `**Assistant:** ${entry.content}\\n\\n`;\n    }\n});\n\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 1,\n            \"title\": \"Ask GPT\",\n            \"message\": markdownConversation\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "b48c1344c84fefa9",
                "10b8dbcd77243188"
            ]
        ]
    },
    {
        "id": "6eec0ae00cae6390",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request received\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 340,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "338303fff77665eb",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Asking Chat GPT...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 660,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2549be45f1455a40",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Notifying Home Assistant...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1020,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "10b8dbcd77243188",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Done!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1220,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "5aed3b93526c1c4d",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.gpt_reset",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 210,
        "y": 500,
        "wires": [
            [
                "ece61f44911801f7",
                "3eb3b845362e748d"
            ]
        ]
    },
    {
        "id": "925a5186eb47998e",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "reset history",
        "func": "\nflow.set(\"history\", null)\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/dismiss\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 1,\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            },
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 750,
        "y": 500,
        "wires": [
            [
                "9d489dcd93d74e21",
                "b48c1344c84fefa9"
            ]
        ]
    },
    {
        "id": "ece61f44911801f7",
        "type": "credentials",
        "z": "6ff8268c9a3c5d70",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "925a5186eb47998e"
            ]
        ]
    },
    {
        "id": "9d489dcd93d74e21",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"History reset!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1000,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3eb3b845362e748d",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Resetting history...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 520,
        "y": 580,
        "wires": [
            []
        ]
    }
]