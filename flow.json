[
    {
        "id": "95ab365c95ad6815",
        "type": "tab",
        "label": "Alex Idiot Sandwich flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ff8268c9a3c5d70",
        "type": "tab",
        "label": "Ask GPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3c13ea3309cc8221",
        "type": "tab",
        "label": "Light Scene GPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "288d161e4d4e4b21",
        "type": "tab",
        "label": "Bedtime GPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0c34728bb51d9c58",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": true,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "3b77e42fb1341f12",
        "type": "inject",
        "z": "95ab365c95ad6815",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Alex is an idiot 2",
        "payloadType": "str",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "360e9df2bbad4c6c"
            ]
        ]
    },
    {
        "id": "b4fbf99066e14a4c",
        "type": "debug",
        "z": "95ab365c95ad6815",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "c7d9b95c6285b32f",
        "type": "function",
        "z": "95ab365c95ad6815",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "b4fbf99066e14a4c"
            ]
        ]
    },
    {
        "id": "360e9df2bbad4c6c",
        "type": "credentials",
        "z": "95ab365c95ad6815",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            }
        ],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "c7d9b95c6285b32f"
            ]
        ]
    },
    {
        "id": "fb068d3a16841160",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.gpt_go",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "cff5484031b9b91a",
                "6eec0ae00cae6390"
            ]
        ]
    },
    {
        "id": "4bc328b347c9ed08",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "ha_states",
        "func": "\n\n\nconst response = await fetch(\"https://home.byeon.ca/api/states\", {\n    method: \"GET\",\n    headers: {\n        \"Authorization\": `Bearer ${msg.ha_token}`,\n        \"Content-Type\": \"application/json\"\n    }\n})\nconst states = await response.json();\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n\n\nmsg.states = states\nmsg.global = global.get(\"homeassistant\")\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 780,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "21b6cbe7eba5b130",
        "type": "credentials",
        "z": "6ff8268c9a3c5d70",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "b2d135aefbd1f5a9",
                "338303fff77665eb"
            ]
        ]
    },
    {
        "id": "b2d135aefbd1f5a9",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.gpt_history\"].state\nlet history = flow.get(\"history\")\nif (keep_history == \"off\" || !history){\n    history = [\n        { role: \"system\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_system_prompt\"].state },\n        { role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state }\n    ]\n} else {\n    if (history) {\n        history.push({ role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state })\n    }\n}\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history\n    });\n\n    history.push(completion.data.choices[0].message)\n    flow.set(\"history\", history)\n    node.status({});\n    msg.history = history\n    msg.keep_history = keep_history\n    msg.completion = completion    \n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 890,
        "y": 240,
        "wires": [
            [
                "09523ba8ab0cc3ed",
                "2549be45f1455a40"
            ]
        ]
    },
    {
        "id": "09523ba8ab0cc3ed",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "notification ha",
        "func": "\n\nlet markdownConversation = \"\";\n\nmsg.history.forEach(entry => {\n    if (entry.role === \"system\") {\n        markdownConversation += `## ${entry.content}\\n\\n`;\n    } else if (entry.role === \"user\") {\n        markdownConversation += `**User:** ${entry.content}\\n\\n`;\n    } else if (entry.role === \"assistant\") {\n        markdownConversation += `**Assistant:** ${entry.content}\\n\\n`;\n    }\n});\n\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 1,\n            \"title\": \"Ask GPT\",\n            \"message\": markdownConversation\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "10b8dbcd77243188"
            ]
        ]
    },
    {
        "id": "6eec0ae00cae6390",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request received\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 380,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "338303fff77665eb",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Asking Chat GPT...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 840,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2549be45f1455a40",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Notifying Home Assistant...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1120,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "10b8dbcd77243188",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Done!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1220,
        "y": 360,
        "wires": [
            [
                "af2f0f1b78d0e893"
            ]
        ]
    },
    {
        "id": "5aed3b93526c1c4d",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.gpt_reset",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 210,
        "y": 500,
        "wires": [
            [
                "ece61f44911801f7",
                "3eb3b845362e748d",
                "a3ae72f97e7251ca"
            ]
        ]
    },
    {
        "id": "925a5186eb47998e",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "reset history",
        "func": "\nflow.set(\"history\", null)\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/dismiss\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 1,\n        }),\n    })\n    const data = await response.text();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            },
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 750,
        "y": 500,
        "wires": [
            [
                "9d489dcd93d74e21"
            ]
        ]
    },
    {
        "id": "ece61f44911801f7",
        "type": "credentials",
        "z": "6ff8268c9a3c5d70",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "925a5186eb47998e"
            ]
        ]
    },
    {
        "id": "9d489dcd93d74e21",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"History reset!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1000,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3eb3b845362e748d",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Resetting history...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 520,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "cff5484031b9b91a",
        "type": "switch",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "property": "is_running",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "2e197f1be40c5795"
            ],
            [
                "2e083ffd7a1005a2",
                "a3ae72f97e7251ca"
            ]
        ]
    },
    {
        "id": "2e197f1be40c5795",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request already running. Please wait until finished...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 440,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2e083ffd7a1005a2",
        "type": "change",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "21b6cbe7eba5b130"
            ]
        ]
    },
    {
        "id": "af2f0f1b78d0e893",
        "type": "change",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "56d4ed0cc60ed9c0",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_text.gpt_instructions",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "^$",
        "halt_if_type": "re",
        "halt_if_compare": "is_not",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 200,
        "y": 200,
        "wires": [
            [
                "cff5484031b9b91a"
            ],
            []
        ]
    },
    {
        "id": "a3ae72f97e7251ca",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_instructions",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status",
            "input_text.gpt_instructions"
        ],
        "data": "{\"value\":\"\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 590,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "47f997c46fe1e172",
        "type": "server-state-changed",
        "z": "3c13ea3309cc8221",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.light_gpt_go",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "75c02e826e3fde75",
                "c957907d84faf49f"
            ]
        ]
    },
    {
        "id": "6a852f333b61ab1b",
        "type": "credentials",
        "z": "3c13ea3309cc8221",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 620,
        "y": 340,
        "wires": [
            [
                "d0d6184d241670dc",
                "b322cc5dcf057a0c"
            ]
        ]
    },
    {
        "id": "3026ce7534f85995",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nconst entity_ids = msg.payload\n\nlet messages = [\n    {\n        role: \"system\", content: `${msg.prompt}` },\n    { role: \"user\", content: `{   \"entity_id\": [${entity_ids}],   \"theme\": \"${global.get(\"homeassistant\").homeAssistant.states[\"input_text.light_gpt_theme\"].state}\" }` }\n]\n\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry {\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: messages,\n        temperature: 0\n    });\n\n    node.status({});\n    msg.completion = completion\n    let result = completion.data.choices[0].message.content.trim()\n    let jsonStart = result.indexOf(\"[\");\n    let jsonEnd = result.lastIndexOf(\"]\");\n\n    if (jsonStart !== -1 && jsonEnd !== -1) {\n        let jsonText = result.substring(jsonStart, jsonEnd + 1);\n        msg.payload = JSON.parse(jsonText);\n        // extract the text outside of the json array\n        msg.text = result.substring(0, jsonStart) + result.substring(jsonEnd + 1);\n    } else {\n        console.log(\"No JSON array found.\");\n    }\n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 830,
        "y": 340,
        "wires": [
            [
                "6efa97849e377240",
                "fd5f42e6ece3987f",
                "6e98c671124f8add"
            ]
        ]
    },
    {
        "id": "c8d804b8b0d071f0",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "light service",
        "func": "\n\n\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/light/turn_on\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(msg.payload),\n    })\n    const data = await response.text();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "733881d525e4eb08"
            ]
        ]
    },
    {
        "id": "75c02e826e3fde75",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request received\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 420,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d0d6184d241670dc",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Asking Chat GPT...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 740,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6efa97849e377240",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Notifying Home Assistant...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1100,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fd5f42e6ece3987f",
        "type": "split",
        "z": "3c13ea3309cc8221",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "c8d804b8b0d071f0"
            ]
        ]
    },
    {
        "id": "733881d525e4eb08",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Done!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1460,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "88bafc330a77da8e",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\n\nlet messages = [\n    { role: \"system\", content: `\nI will give you a theme and a list of lights and you will generate a color in the rgb format for each light. \nProvide an explanation.\nYour output will be json\n` },\n    { role: \"user\", content: `${global.get(\"homeassistant\").homeAssistant.states[\"input_text.light_gpt_theme\"].state} \"light.alex_office_ceiling\",\"light.alex_office_lamp_desk\",\"light.alex_office_lamp_shelf\"` }\n]\n\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: messages,\n        temperature: 0\n    });\n    \n    node.status({});\n    msg.completion = completion\n    let result = completion.data.choices[0].message.content.trim()\n    let jsonStart = result.indexOf(\"{\");\n    let jsonEnd = result.lastIndexOf(\"}\");\n\n    if (jsonStart !== -1 && jsonEnd !== -1) {\n        let jsonText = result.substring(jsonStart, jsonEnd + 1);\n        let otherText = result.substring(jsonEnd + 2, result.length)\n        msg.otherText = otherText\n        let parsedResult = JSON.parse(jsonText);\n        let payload = []\n        Object.keys(parsedResult).forEach(function(key) {\n            payload.push({ \"rgb_color\": msg.payload[key], \"brightness_pct\": 100, \"entity_id\": key })\n        });\n        msg.payload = payload\n    } else {\n        console.log(\"No JSON array found.\");\n    }\n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 1270,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b322cc5dcf057a0c",
        "type": "ha-get-entities",
        "z": "3c13ea3309cc8221",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 0,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.family",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 650,
        "y": 600,
        "wires": [
            [
                "7ac4580bc60f964e"
            ]
        ]
    },
    {
        "id": "7ac4580bc60f964e",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "split entity_id",
        "func": "\nconst entity_ids = msg.payload.map(entity => entity.entity_id)\n// split the array into comma separated values\nconst entity_ids_string = entity_ids.join(',')\nmsg.payload = entity_ids_string\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 500,
        "wires": [
            [
                "3026ce7534f85995"
            ]
        ]
    },
    {
        "id": "6e98c671124f8add",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "notification ha",
        "func": "\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 2,\n            \"title\": \"Ask GPT\",\n            \"message\": msg.text\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1220,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c957907d84faf49f",
        "type": "template",
        "z": "3c13ea3309cc8221",
        "name": "prompt",
        "field": "prompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You will generate a json to configure a light.  Your answer has to be a valid json array. You will always respond following the format below.\n\n{\n\"rgb_color\": [<red>, <green>, <blue>],\n\"brightness_pct\": <brightness>,\n\"entity_id\": \"<entity_id>\"\n}\n\nYou will only change the following values\n- <red>\n- <green>\n- <blue>\n- <brightness>\n- <entity_id>\n\n<red>, <green> and <blue> are each numbers between 0 and 255. Their combined value will define the colour of the light.\n<brigthness> is a percentage that will define how bright the light gets.\n<entity_id> will be provided by the user and is the id  of the light being changed. If there are multiple entity_id provided by the user you will provide multiple outputs in a json array.\nDon't pick the same color for every light.\n\nThe user input is a json and should look like the following\n\n{\n\"entity_id\": [\"test\"],\n\"theme\": \"halloween\"\n}\n\nYou will choose the color values based on what the user provides in the theme attribute, explain your choice.",
        "output": "str",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "6a852f333b61ab1b"
            ]
        ]
    },
    {
        "id": "8743110cd9408959",
        "type": "server-state-changed",
        "z": "288d161e4d4e4b21",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.bedtime_gpt_go",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "a2b7c4c7e8441a85",
                "37ca62ed3c04fe30"
            ]
        ]
    },
    {
        "id": "a60f4c8409df772c",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "ha_states",
        "func": "\n\n\nconst response = await fetch(\"https://home.byeon.ca/api/states\", {\n    method: \"GET\",\n    headers: {\n        \"Authorization\": `Bearer ${msg.ha_token}`,\n        \"Content-Type\": \"application/json\"\n    }\n})\nconst states = await response.json();\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n\n\nmsg.states = states\nmsg.global = global.get(\"homeassistant\")\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1020,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "45f1f0891acb89c0",
        "type": "credentials",
        "z": "288d161e4d4e4b21",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "11fc611114dc21b2",
                "80a9847f5679bcb8"
            ]
        ]
    },
    {
        "id": "11fc611114dc21b2",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.bedtime_gpt_keep_going\"].state\nlet history = flow.get(\"history\")\nif (keep_history == \"off\" || !history){\n    history = [\n        { role: \"system\", content: msg.system_prompt },\n        { role: \"user\", content: msg.user_prompt }\n    ]\n} else {\n    if (history) {\n        history.push({ role: \"user\", content: msg.user_prompt_continue })\n    }\n}\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history,\n        temperature: 1\n    });\n\n    history.push(completion.data.choices[0].message)\n    flow.set(\"history\", history)\n    node.status({});\n    msg.history = history\n    msg.keep_history = keep_history\n    msg.completion = completion    \n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "11b785949a0a6cf0",
                "5cd2ab2cce068f88"
            ]
        ]
    },
    {
        "id": "11b785949a0a6cf0",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "notification ha",
        "func": "\n\nlet markdownConversation = \"\";\n\nmsg.history.forEach(entry => {\n    if (entry.role === \"system\") {\n        markdownConversation += `## ${entry.content}\\n\\n`;\n    } else if (entry.role === \"user\") {\n        markdownConversation += `**User:** ${entry.content}\\n\\n`;\n    } else if (entry.role === \"assistant\") {\n        markdownConversation += `**Assistant:** ${entry.content}\\n\\n`;\n    }\n});\n\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 3,\n            \"title\": \"Ask GPT\",\n            \"message\": markdownConversation\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1000,
        "y": 460,
        "wires": [
            [
                "6db258db411c6883"
            ]
        ]
    },
    {
        "id": "a2b7c4c7e8441a85",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request received\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 620,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "80a9847f5679bcb8",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Asking Chat GPT...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1080,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5cd2ab2cce068f88",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Notifying Home Assistant...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1360,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6db258db411c6883",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Done!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1460,
        "y": 460,
        "wires": [
            [
                "0dd2430283ae40aa"
            ]
        ]
    },
    {
        "id": "acf182427573a9c7",
        "type": "server-state-changed",
        "z": "288d161e4d4e4b21",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.bedtime_gpt_reset",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "add745d4a16924fb",
                "0682e4250f2ddd17"
            ]
        ]
    },
    {
        "id": "04431323f602107a",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "reset history",
        "func": "\nflow.set(\"history\", null)\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/dismiss\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 1,\n        }),\n    })\n    const data = await response.text();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            },
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "eb6c5502a1c51f25"
            ]
        ]
    },
    {
        "id": "add745d4a16924fb",
        "type": "credentials",
        "z": "288d161e4d4e4b21",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 760,
        "y": 600,
        "wires": [
            [
                "04431323f602107a"
            ]
        ]
    },
    {
        "id": "eb6c5502a1c51f25",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"History reset!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1240,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "0682e4250f2ddd17",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Resetting history...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 760,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "5edbdee36adabe60",
        "type": "switch",
        "z": "288d161e4d4e4b21",
        "name": "",
        "property": "is_running",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 320,
        "wires": [
            [
                "70687b81dabc2067"
            ],
            [
                "e85a4360c5bd2116"
            ]
        ]
    },
    {
        "id": "70687b81dabc2067",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request already running. Please wait until finished...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 880,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e85a4360c5bd2116",
        "type": "change",
        "z": "288d161e4d4e4b21",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 380,
        "wires": [
            [
                "45f1f0891acb89c0"
            ]
        ]
    },
    {
        "id": "0dd2430283ae40aa",
        "type": "change",
        "z": "288d161e4d4e4b21",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a3462431770a48ed",
        "type": "template",
        "z": "288d161e4d4e4b21",
        "name": "user_prompt",
        "field": "user_prompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Use the themes below\nMoral: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_emotions\"].state}}\nProtagonists: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_protagonist\"].state}}\nLocation: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_location\"].state}}\nOther: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_other\"].state}}",
        "output": "str",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "8dd96d2dbebcb7e8"
            ]
        ]
    },
    {
        "id": "1696fbdff68025a3",
        "type": "template",
        "z": "288d161e4d4e4b21",
        "name": "system_prompt",
        "field": "system_prompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You write {{payload.homeAssistant.states[\"input_select.bedtime_gpt_type\"].state}} for children that are {{payload.homeAssistant.states[\"input_number.bedtime_gpt_age_month\"].state}} month(s) old.\nThe user will provide a list of themes that you will use as inspiration. If the user says Random, pick something of your own.\nYour response will be less than 1000 characters.\nYou will answer in {{payload.homeAssistant.states[\"input_text.bedtime_gpt_language\"].state}}\n\n\n{{payload.homeAssistant}}",
        "output": "str",
        "x": 140,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8dd96d2dbebcb7e8",
        "type": "template",
        "z": "288d161e4d4e4b21",
        "name": "user_prompt_continue",
        "field": "user_prompt_continue",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Keep going using the themes below\nMoral: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_emotions\"].state}}\nProtagonists: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_protagonist\"].state}}\nLocation: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_location\"].state}}\nOther: {{payload.homeAssistant.states[\"input_select.bedtime_gpt_theme_other\"].state}}",
        "output": "str",
        "x": 600,
        "y": 160,
        "wires": [
            [
                "508e1d39c495b2cc"
            ]
        ]
    },
    {
        "id": "508e1d39c495b2cc",
        "type": "debug",
        "z": "288d161e4d4e4b21",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "37ca62ed3c04fe30",
        "type": "change",
        "z": "288d161e4d4e4b21",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "homeassistant",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 300,
        "wires": [
            [
                "15368ac2417639c7"
            ]
        ]
    },
    {
        "id": "15368ac2417639c7",
        "type": "handlebars",
        "z": "288d161e4d4e4b21",
        "name": "",
        "sourceProperty": "payload",
        "targetProperty": "system_prompt",
        "query": "You write {{payload.homeAssistant.states[\"input_select.bedtime_gpt_type\"].state}} for children that are\n{{payload.homeAssistant.states[\"input_number.bedtime_gpt_age_month\"].state}} month(s) old.\nThe user will provide a list of themes that you will use as inspiration. If the user says Random, pick something of your\nown.\nYour response will be less than 1000 characters.\nYou will answer in {{payload.homeAssistant.states[\"input_text.bedtime_gpt_language\"].state}}\n",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "a3462431770a48ed"
            ]
        ]
    }
]