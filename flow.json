[
    {
        "id": "95ab365c95ad6815",
        "type": "tab",
        "label": "Alex Idiot Sandwich flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ff8268c9a3c5d70",
        "type": "tab",
        "label": "Ask GPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3c13ea3309cc8221",
        "type": "tab",
        "label": "Light Scene GPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "288d161e4d4e4b21",
        "type": "tab",
        "label": "Bedtime GPT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "be9302db5cc86901",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5696f54716e2d43c",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0c34728bb51d9c58",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": true,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "d1d223ae7f73128c",
        "type": "chatbot-telegram-node",
        "botname": "gptbyeonbot",
        "usernames": "tidhilm",
        "polling": "1000",
        "store": "",
        "log": "",
        "debug": true,
        "skipMediaFiles": false,
        "webHook": "",
        "connectMode": "polling",
        "storeMessages": true,
        "enableMissionControl": false,
        "inspectMessages": true,
        "chatbotId": ""
    },
    {
        "id": "36d5ada22c971958",
        "type": "chatbot-telegram-node",
        "botname": "gptbyeonbot",
        "usernames": "tidhilm",
        "polling": "1000",
        "store": "",
        "log": "",
        "debug": true,
        "skipMediaFiles": false,
        "webHook": "",
        "connectMode": "polling",
        "storeMessages": true,
        "enableMissionControl": false,
        "inspectMessages": true,
        "chatbotId": ""
    },
    {
        "id": "3b77e42fb1341f12",
        "type": "inject",
        "z": "95ab365c95ad6815",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Alex is an idiot 2",
        "payloadType": "str",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "360e9df2bbad4c6c"
            ]
        ]
    },
    {
        "id": "b4fbf99066e14a4c",
        "type": "debug",
        "z": "95ab365c95ad6815",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "c7d9b95c6285b32f",
        "type": "function",
        "z": "95ab365c95ad6815",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "b4fbf99066e14a4c"
            ]
        ]
    },
    {
        "id": "360e9df2bbad4c6c",
        "type": "credentials",
        "z": "95ab365c95ad6815",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            }
        ],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "c7d9b95c6285b32f"
            ]
        ]
    },
    {
        "id": "fb068d3a16841160",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.gpt_go",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "cff5484031b9b91a",
                "6eec0ae00cae6390"
            ]
        ]
    },
    {
        "id": "4bc328b347c9ed08",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "ha_states",
        "func": "\n\n\nconst response = await fetch(\"https://home.byeon.ca/api/states\", {\n    method: \"GET\",\n    headers: {\n        \"Authorization\": `Bearer ${msg.ha_token}`,\n        \"Content-Type\": \"application/json\"\n    }\n})\nconst states = await response.json();\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n\n\nmsg.states = states\nmsg.global = global.get(\"homeassistant\")\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 780,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "21b6cbe7eba5b130",
        "type": "credentials",
        "z": "6ff8268c9a3c5d70",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "b2d135aefbd1f5a9",
                "338303fff77665eb"
            ]
        ]
    },
    {
        "id": "b2d135aefbd1f5a9",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.gpt_history\"].state\nlet history = flow.get(\"history\")\nif (keep_history == \"off\" || !history){\n    history = [\n        { role: \"system\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_system_prompt\"].state },\n        { role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state }\n    ]\n} else {\n    if (history) {\n        history.push({ role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state })\n    }\n}\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history\n    });\n\n    history.push(completion.data.choices[0].message)\n    flow.set(\"history\", history)\n    node.status({});\n    msg.history = history\n    msg.keep_history = keep_history\n    msg.completion = completion    \n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 890,
        "y": 240,
        "wires": [
            [
                "09523ba8ab0cc3ed",
                "2549be45f1455a40"
            ]
        ]
    },
    {
        "id": "09523ba8ab0cc3ed",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "notification ha",
        "func": "\n\nlet markdownConversation = \"\";\n\nmsg.history.forEach(entry => {\n    if (entry.role === \"system\") {\n        markdownConversation += `## ${entry.content}\\n\\n`;\n    } else if (entry.role === \"user\") {\n        markdownConversation += `**User:** ${entry.content}\\n\\n`;\n    } else if (entry.role === \"assistant\") {\n        markdownConversation += `**Assistant:** ${entry.content}\\n\\n`;\n    }\n});\n\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 1,\n            \"title\": \"Ask GPT\",\n            \"message\": markdownConversation\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "10b8dbcd77243188"
            ]
        ]
    },
    {
        "id": "6eec0ae00cae6390",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request received\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 380,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "338303fff77665eb",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Asking Chat GPT...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 840,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2549be45f1455a40",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Notifying Home Assistant...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1120,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "10b8dbcd77243188",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Done!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1220,
        "y": 360,
        "wires": [
            [
                "af2f0f1b78d0e893"
            ]
        ]
    },
    {
        "id": "5aed3b93526c1c4d",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.gpt_reset",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 210,
        "y": 500,
        "wires": [
            [
                "ece61f44911801f7",
                "3eb3b845362e748d",
                "a3ae72f97e7251ca"
            ]
        ]
    },
    {
        "id": "925a5186eb47998e",
        "type": "function",
        "z": "6ff8268c9a3c5d70",
        "name": "reset history",
        "func": "\nflow.set(\"history\", null)\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/dismiss\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 1,\n        }),\n    })\n    const data = await response.text();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            },
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 750,
        "y": 500,
        "wires": [
            [
                "9d489dcd93d74e21"
            ]
        ]
    },
    {
        "id": "ece61f44911801f7",
        "type": "credentials",
        "z": "6ff8268c9a3c5d70",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "925a5186eb47998e"
            ]
        ]
    },
    {
        "id": "9d489dcd93d74e21",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"History reset!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1000,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3eb3b845362e748d",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Resetting history...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 520,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "cff5484031b9b91a",
        "type": "switch",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "property": "is_running",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "2e197f1be40c5795"
            ],
            [
                "2e083ffd7a1005a2",
                "a3ae72f97e7251ca"
            ]
        ]
    },
    {
        "id": "2e197f1be40c5795",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request already running. Please wait until finished...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 440,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2e083ffd7a1005a2",
        "type": "change",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "21b6cbe7eba5b130"
            ]
        ]
    },
    {
        "id": "af2f0f1b78d0e893",
        "type": "change",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "56d4ed0cc60ed9c0",
        "type": "server-state-changed",
        "z": "6ff8268c9a3c5d70",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_text.gpt_instructions",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "^$",
        "halt_if_type": "re",
        "halt_if_compare": "is_not",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 200,
        "y": 200,
        "wires": [
            [
                "cff5484031b9b91a"
            ],
            []
        ]
    },
    {
        "id": "a3ae72f97e7251ca",
        "type": "api-call-service",
        "z": "6ff8268c9a3c5d70",
        "name": "update_instructions",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status",
            "input_text.gpt_instructions"
        ],
        "data": "{\"value\":\"\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 590,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "47f997c46fe1e172",
        "type": "server-state-changed",
        "z": "3c13ea3309cc8221",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.light_gpt_go",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "75c02e826e3fde75",
                "c957907d84faf49f"
            ]
        ]
    },
    {
        "id": "6a852f333b61ab1b",
        "type": "credentials",
        "z": "3c13ea3309cc8221",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 780,
        "y": 340,
        "wires": [
            [
                "d0d6184d241670dc",
                "508f99c93026dd55"
            ]
        ]
    },
    {
        "id": "3026ce7534f85995",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nconst entity_ids = msg.payload\n\nlet messages = [\n    {\n        role: \"system\", content: `${msg.prompt}` },\n    { role: \"user\", content: `\n\\`\\`\\`\n{   \n    \"entity_id\": [${entity_ids}]\n}\n\\`\\`\\`\n${global.get(\"homeassistant\").homeAssistant.states[\"input_text.light_gpt_theme\"].state}` }\n]\n\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.light_gpt_history\"].state\nlet history = flow.get(\"history\")\nif (keep_history == \"off\" || !history) {\n    history = [\n        { role: \"system\", content: `${msg.prompt}`},\n        {\n            role: \"user\", content: `\n\\`\\`\\`\n{   \n    \"entity_id\": [${entity_ids}]\n}\n\\`\\`\\`\n${global.get(\"homeassistant\").homeAssistant.states[\"input_text.light_gpt_theme\"].state}`\n        }\n    ]\n} else {\n    if (history) {\n        history.push({\n            role: \"user\", content: `\n\\`\\`\\`\n{   \n    \"entity_id\": [${entity_ids}]\n}\n\\`\\`\\`\n${global.get(\"homeassistant\").homeAssistant.states[\"input_text.light_gpt_theme\"].state}`\n        })\n    }\n}\n\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry {\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history,\n        temperature: parseFloat(global.get(\"homeassistant\").homeAssistant.states[\"input_number.light_gpt_temperature\"].state)\n    });\n\n    node.status({});\n    history.push(completion.data.choices[0].message)\n    flow.set(\"history\", history)\n    msg.history = history\n    msg.keep_history = keep_history\n    msg.completion = completion\n    msg.cost = completion.data.usage.total_tokens * 0.002  / 1000\n    let resp = completion.data.choices[0].message.content\n    \n    const extract = (string) => {\n        const regex = /`{3}[\\s\\S]*?`{3}/g\n        const matches = string.match(regex)\n        const result = string.replace(regex, '')\n        return { result, matches }\n    }\n\n    const { explanation, matches } = extract(resp)\n    const matchesStripped = matches.map(match => match.replace(/`{3}/g, ''))\n    msg.payload = JSON.parse(matchesStripped)\n} catch (error) {\n    msg.error = error\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 1410,
        "y": 380,
        "wires": [
            [
                "497987a43fc178b9",
                "620e5380f870b356",
                "07b69d087b9b4dbc",
                "0ca74cf6d7447248",
                "0c7327e6ef23a430"
            ]
        ]
    },
    {
        "id": "c8d804b8b0d071f0",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "light service",
        "func": "\n\n\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/light/turn_on\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(msg.payload),\n    })\n    const data = await response.text();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1850,
        "y": 380,
        "wires": [
            [
                "40555d80f9399c1e"
            ]
        ]
    },
    {
        "id": "75c02e826e3fde75",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request received\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 620,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d0d6184d241670dc",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Asking Chat GPT...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1100,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6efa97849e377240",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Notifying Home Assistant...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1740,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "fd5f42e6ece3987f",
        "type": "split",
        "z": "3c13ea3309cc8221",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1670,
        "y": 380,
        "wires": [
            [
                "c8d804b8b0d071f0"
            ]
        ]
    },
    {
        "id": "733881d525e4eb08",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Done!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2200,
        "y": 280,
        "wires": [
            [
                "674c6218a5597c64"
            ]
        ]
    },
    {
        "id": "88bafc330a77da8e",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "d": true,
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\n\n\n\nlet messages = [\n    { role: \"system\", content: `The user input will include a json array and an explanation for a choice of colors.\nExtract the explanation and output it as is. Exclude the json array from your response.\n` },\n    { role: \"user\", content: `${msg.completion.data.choices[0].message.content.trim()}` }\n]\n\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: messages,\n        temperature: 0\n    });\n    \n    node.status({});\n    msg.completion_split = completion\n    let keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.light_gpt_history\"].state\n    let explanation_history = flow.get(\"explanation_history\")\n    if (keep_history == \"off\" || !explanation_history) {\n        explanation_history = [\n            completion.data.choices[0].message.content\n        ]\n    } else {\n        if (explanation_history) {\n            explanation_history.push(completion.data.choices[0].message.content)\n        }\n    }\n    flow.set(\"explanation_history\", explanation_history)\n    msg.explanation_history = explanation_history\n\n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 1910,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "b322cc5dcf057a0c",
        "type": "ha-get-entities",
        "z": "3c13ea3309cc8221",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 0,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.family",
                "valueType": "str"
            },
            {
                "property": "entity_id",
                "logic": "does_not_include",
                "value": "light.family_room",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 1070,
        "y": 380,
        "wires": [
            [
                "7ac4580bc60f964e"
            ]
        ]
    },
    {
        "id": "7ac4580bc60f964e",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "split entity_id",
        "func": "\nconst entity_ids = msg.payload.map(entity => entity.entity_id)\n// split the array into comma separated values\nconst entity_ids_string = entity_ids.join(',')\nmsg.payload = entity_ids_string\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "3026ce7534f85995"
            ]
        ]
    },
    {
        "id": "6e98c671124f8add",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "notification ha",
        "func": "\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 2,\n            \"title\": \"Ask GPT\",\n            \"message\": msg.text.join(\"\\n___\\n\")\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1860,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "c957907d84faf49f",
        "type": "template",
        "z": "3c13ea3309cc8221",
        "name": "prompt",
        "field": "prompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You will generate a json to configure some lights.  Your answer has to be a valid json array. You have to respond following the format below.\n\n```\n[\n{\n\"rgb_color\": [<red>, <green>, <blue>],\n\"brightness_pct\": <brightness>,\n\"entity_id\": \"<entity_id>\"\n}\n]\n```\n\nYou will only change the following values\n- <red>\n- <green>\n- <blue>\n- <brightness>\n- <entity_id>\n\n<red>, <green> and <blue> are each numbers between 0 and 255. Their combined value will define the colour of the light.\n<brightness> is a percentage.\n<entity_id> will be provided by the user and is the id  of the light being changed. If there are multiple entity_id provided by the user you will provide multiple outputs in the json array.\nNever pick black.\n\nThe user input is composed of 2 things\n- a json with the list of entity_id for the lights\n- some text that you will use to pick the colors and the brightness. You will explain your choice\nSee the example below\n\n```\n{\n\"entity_id\": [\"test\"],\n}\n```\nTest",
        "output": "str",
        "x": 500,
        "y": 260,
        "wires": [
            [
                "9bf6185befa68120",
                "7fc03833bf3ee150"
            ]
        ]
    },
    {
        "id": "40555d80f9399c1e",
        "type": "switch",
        "z": "3c13ea3309cc8221",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2050,
        "y": 380,
        "wires": [
            [
                "733881d525e4eb08"
            ],
            [
                "674c6218a5597c64",
                "4bb2655202c35deb"
            ]
        ]
    },
    {
        "id": "5abfc90bfb441277",
        "type": "change",
        "z": "3c13ea3309cc8221",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 260,
        "wires": [
            [
                "6a852f333b61ab1b"
            ]
        ]
    },
    {
        "id": "9bf6185befa68120",
        "type": "switch",
        "z": "3c13ea3309cc8221",
        "name": "",
        "property": "is_running",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "9707dd51ef17a410"
            ],
            [
                "5abfc90bfb441277"
            ]
        ]
    },
    {
        "id": "9707dd51ef17a410",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request already running. Please wait until finished...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 800,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "674c6218a5597c64",
        "type": "change",
        "z": "3c13ea3309cc8221",
        "name": "not running",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2630,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "4a3d74f40397fd33",
        "type": "credentials",
        "z": "3c13ea3309cc8221",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 520,
        "y": 780,
        "wires": [
            [
                "d2a2101c4874a863"
            ]
        ]
    },
    {
        "id": "8eb3ba5a823123ad",
        "type": "server-state-changed",
        "z": "3c13ea3309cc8221",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.light_gpt_reset",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 170,
        "y": 780,
        "wires": [
            [
                "7fc03833bf3ee150",
                "ee9d30648aa14453",
                "4a3d74f40397fd33"
            ]
        ]
    },
    {
        "id": "7fc03833bf3ee150",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_instructions",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status",
            "input_text.light_gpt_theme"
        ],
        "data": "{\"value\":\"\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 570,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "ee9d30648aa14453",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Resetting history...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 500,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "d2a2101c4874a863",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "reset history",
        "func": "\nflow.set(\"history\", null)\nflow.set(\"explanation_history\", null)\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/dismiss\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 2,\n        }),\n    })\n    const data = await response.text();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            },
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 730,
        "y": 800,
        "wires": [
            [
                "b6ee5892827cacf8",
                "486a77f879a33e03",
                "81527365ee24380e"
            ]
        ]
    },
    {
        "id": "b6ee5892827cacf8",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"History reset!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 980,
        "y": 800,
        "wires": [
            [
                "674c6218a5597c64"
            ]
        ]
    },
    {
        "id": "3a41874a95c52439",
        "type": "debug",
        "z": "3c13ea3309cc8221",
        "name": "debug completion",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "completion",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 180,
        "wires": []
    },
    {
        "id": "497987a43fc178b9",
        "type": "switch",
        "z": "3c13ea3309cc8221",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 540,
        "wires": [
            [
                "fd5f42e6ece3987f",
                "88bafc330a77da8e",
                "3a41874a95c52439",
                "4c27055c0292e099",
                "6efa97849e377240"
            ],
            [
                "674c6218a5597c64",
                "4bb2655202c35deb",
                "4c27055c0292e099"
            ]
        ]
    },
    {
        "id": "4c27055c0292e099",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "explanation",
        "func": "const string = msg.completion.data.choices[0].message.content\nlet history_array, history\n\ntry {\n    const extract = (string) => {\n        const regex = /`{3}[\\s\\S]*?`{3}/g\n        const matches = string.match(regex)\n        const result = string.replace(regex, '')\n        return { result, matches }\n    }\n\n    const { result, matches } = extract(string)\n    const matchesStripped = matches.map(match => match.replace(/`{3}/g, ''))\n    history = result\n\n} catch {\n    history = string\n}\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.light_gpt_history\"].state\nhistory_array = flow.get(\"explanation_history\")\nif (keep_history == \"off\" || !history_array) {\n    history_array = [\n        history\n    ]\n} else {\n    if (history_array) {\n        history_array.push(history)\n    }\n}\nmsg.text = history_array\nflow.set(\"explanation_history\", history_array)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 680,
        "wires": [
            [
                "6e98c671124f8add"
            ]
        ]
    },
    {
        "id": "4bb2655202c35deb",
        "type": "debug",
        "z": "3c13ea3309cc8221",
        "name": "debug error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 480,
        "wires": []
    },
    {
        "id": "013419284f4c6b1b",
        "type": "server-state-changed",
        "z": "3c13ea3309cc8221",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_text.light_gpt_theme",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "^$",
        "halt_if_type": "re",
        "halt_if_compare": "is_not",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 200,
        "y": 220,
        "wires": [
            [
                "c957907d84faf49f",
                "75c02e826e3fde75"
            ],
            []
        ]
    },
    {
        "id": "508f99c93026dd55",
        "type": "switch",
        "z": "3c13ea3309cc8221",
        "name": "",
        "property": "homeassistant.homeAssistant.states[\"input_select.room\"].state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "Alex's Office",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Family Room",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Dining Room",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 870,
        "y": 420,
        "wires": [
            [
                "acbcec9469999ec0"
            ],
            [
                "b322cc5dcf057a0c"
            ],
            [],
            []
        ]
    },
    {
        "id": "acbcec9469999ec0",
        "type": "ha-get-entities",
        "z": "3c13ea3309cc8221",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 0,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.alex",
                "valueType": "str"
            },
            {
                "property": "attributes.is_deconz_group",
                "logic": "is",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "7ac4580bc60f964e"
            ]
        ]
    },
    {
        "id": "ea0152c1c469442b",
        "type": "template",
        "z": "3c13ea3309cc8221",
        "name": "prompt",
        "field": "prompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You will generate a json to configure some lights.  Your answer has to be a valid json array. You have to respond following the format below.\n\n```\n[\n{\n\"rgb_color\": [<red>, <green>, <blue>],\n\"brightness_pct\": <brightness>,\n\"entity_id\": \"<entity_id>\"\n}\n]\n```\n\nYou will only change the following values\n- <red>\n- <green>\n- <blue>\n- <brightness>\n- <entity_id>\n\n<red>, <green> and <blue> are each numbers between 0 and 255. Their combined value will define the colour of the light.\n<brightness> is a percentage.\n<entity_id> will be provided by the user and is the id  of the light being changed. If there are multiple entity_id provided by the user you will provide multiple outputs in the json array.\nAvoid picking the same color for every light. Do not pick black.\n\nThe user input is a json and should look like the following\n\n{\n\"entity_id\": [\"test\"],\n\"theme\": \"halloween\"\n}\n\nYou will choose the color values based on what the user provides in the theme attribute. Explain your choice.",
        "output": "str",
        "x": 480,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "07b69d087b9b4dbc",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.light_gpt_token_usage"
        ],
        "data": "{\"value\":completion.data.usage.total_tokens}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1640,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "620e5380f870b356",
        "type": "change",
        "z": "3c13ea3309cc8221",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "completion",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "0ca74cf6d7447248",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.light_gpt_cost"
        ],
        "data": "{\"value\":cost}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1640,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "0c7327e6ef23a430",
        "type": "function",
        "z": "3c13ea3309cc8221",
        "name": "notification ha",
        "func": "\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 17,\n            \"title\": \"Ask GPT\",\n            \"message\": msg.completion.data.choices[0].message.content\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1660,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "486a77f879a33e03",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.light_gpt_token_usage"
        ],
        "data": "{\"value\":0}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 980,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "81527365ee24380e",
        "type": "api-call-service",
        "z": "3c13ea3309cc8221",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.light_gpt_cost"
        ],
        "data": "{\"value\":0}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 980,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "8743110cd9408959",
        "type": "server-state-changed",
        "z": "288d161e4d4e4b21",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.bedtime_gpt_go",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "a2b7c4c7e8441a85",
                "947c96e692532a40"
            ]
        ]
    },
    {
        "id": "a60f4c8409df772c",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "ha_states",
        "func": "\n\n\nconst response = await fetch(\"https://home.byeon.ca/api/states\", {\n    method: \"GET\",\n    headers: {\n        \"Authorization\": `Bearer ${msg.ha_token}`,\n        \"Content-Type\": \"application/json\"\n    }\n})\nconst states = await response.json();\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n\n\nmsg.states = states\nmsg.global = global.get(\"homeassistant\")\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1020,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "45f1f0891acb89c0",
        "type": "credentials",
        "z": "288d161e4d4e4b21",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "11fc611114dc21b2",
                "80a9847f5679bcb8"
            ]
        ]
    },
    {
        "id": "11fc611114dc21b2",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.bedtime_gpt_keep_going\"].state\nlet history = flow.get(\"history\")\nif (keep_history == \"off\" || !history){\n    history = [\n        { role: \"system\", content: msg.system_prompt },\n        { role: \"user\", content: msg.user_prompt }\n    ]\n} else {\n    if (history) {\n        history.push({ role: \"user\", content: msg.user_prompt_continue })\n    }\n}\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history,\n        temperature: 1\n    });\n\n    history.push(completion.data.choices[0].message)\n    flow.set(\"history\", history)\n    node.status({});\n    msg.history = history\n    msg.keep_history = keep_history\n    msg.completion = completion    \n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "11b785949a0a6cf0",
                "5cd2ab2cce068f88"
            ]
        ]
    },
    {
        "id": "11b785949a0a6cf0",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "notification ha",
        "func": "\n\nlet markdownConversation = \"\";\n\nmsg.history.forEach(entry => {\n    if (entry.role === \"system\") {\n        markdownConversation += `## ${entry.content}\\n___\\n`;\n    } else if (entry.role === \"user\") {\n        markdownConversation += `**User:** ${entry.content}\\n___\\n`;\n    } else if (entry.role === \"assistant\") {\n        markdownConversation += `**Assistant:** ${entry.content}\\n___\\n`;\n    }\n});\n\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/create\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 3,\n            \"title\": \"Ask GPT\",\n            \"message\": markdownConversation\n        }),\n    })\n    const data = await response.json();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 1000,
        "y": 460,
        "wires": [
            [
                "6db258db411c6883"
            ]
        ]
    },
    {
        "id": "a2b7c4c7e8441a85",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request received\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 620,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "80a9847f5679bcb8",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Asking Chat GPT...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1080,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5cd2ab2cce068f88",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Notifying Home Assistant...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1360,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6db258db411c6883",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Done!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1460,
        "y": 460,
        "wires": [
            [
                "0dd2430283ae40aa"
            ]
        ]
    },
    {
        "id": "acf182427573a9c7",
        "type": "server-state-changed",
        "z": "288d161e4d4e4b21",
        "name": "",
        "server": "0c34728bb51d9c58",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_button.bedtime_gpt_reset",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "add745d4a16924fb",
                "0682e4250f2ddd17"
            ]
        ]
    },
    {
        "id": "04431323f602107a",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "reset history",
        "func": "\nflow.set(\"history\", null)\n\ntry {\n    const response = await fetch(\"https://home.byeon.ca/api/services/persistent_notification/dismiss\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${msg.ha_token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"notification_id\": 3,\n        }),\n    })\n    const data = await response.text();\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Request successful\" });\n    msg.rsp = data\n} catch (error) {\n    console.log(error);\n    msg.error = error\n}\nnode.status({});   // to clear the status\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            },
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "eb6c5502a1c51f25"
            ]
        ]
    },
    {
        "id": "add745d4a16924fb",
        "type": "credentials",
        "z": "288d161e4d4e4b21",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            },
            {
                "value": "ha_token",
                "type": "msg"
            }
        ],
        "x": 760,
        "y": 600,
        "wires": [
            [
                "04431323f602107a"
            ]
        ]
    },
    {
        "id": "eb6c5502a1c51f25",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"History reset!\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1240,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "0682e4250f2ddd17",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Resetting history...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 760,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "5edbdee36adabe60",
        "type": "switch",
        "z": "288d161e4d4e4b21",
        "name": "",
        "property": "is_running",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 320,
        "wires": [
            [
                "70687b81dabc2067"
            ],
            [
                "e85a4360c5bd2116"
            ]
        ]
    },
    {
        "id": "70687b81dabc2067",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.gpt_status"
        ],
        "data": "{\"value\":\"Request already running. Please wait until finished...\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 880,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e85a4360c5bd2116",
        "type": "change",
        "z": "288d161e4d4e4b21",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 380,
        "wires": [
            [
                "45f1f0891acb89c0"
            ]
        ]
    },
    {
        "id": "0dd2430283ae40aa",
        "type": "change",
        "z": "288d161e4d4e4b21",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "947c96e692532a40",
        "type": "function",
        "z": "288d161e4d4e4b21",
        "name": "set_prompts",
        "func": "msg.system_prompt = `You write ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_type\"].state} for children that are ${global.get(\"homeassistant\").homeAssistant.states[\"input_number.bedtime_gpt_age_month\"].state} month(s) old.\n${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_type\"].state == \"Songs\" ? \"Write  a song. Provide chord progression and lyrics\" : \"\" }\nThe user will provide a list of themes that you will use as inspiration. If the user says Random, pick something of your own.\nYou will answer in ${global.get(\"homeassistant\").homeAssistant.states[\"input_text.bedtime_gpt_language\"].state}\n`\n\nmsg.user_prompt = `Use the themes below\nMoral: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_emotions\"].state}\nProtagonists: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_protagonist\"].state}\nLocation: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_location\"].state}\nOther: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_other\"].state}\n`\n\nif (global.get(\"homeassistant\").homeAssistant.states[\"input_text.bedtime_gpt_user_prompt\"].state != \"\") {\n    msg.user_prompt_continue = global.get(\"homeassistant\").homeAssistant.states[\"input_text.bedtime_gpt_user_prompt\"].state\n} else {\n    msg.user_prompt_continue = `\nKeep going using the themes below\nMoral: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_emotions\"].state}\nProtagonists: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_protagonist\"].state}\nLocation: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_location\"].state}\nOther: ${global.get(\"homeassistant\").homeAssistant.states[\"input_select.bedtime_gpt_theme_other\"].state}\n`\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 320,
        "wires": [
            [
                "5edbdee36adabe60",
                "bba348498988c13f"
            ]
        ]
    },
    {
        "id": "bba348498988c13f",
        "type": "api-call-service",
        "z": "288d161e4d4e4b21",
        "name": "update_status",
        "server": "0c34728bb51d9c58",
        "version": 5,
        "debugenabled": false,
        "domain": "input_text",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.bedtime_gpt_user_prompt"
        ],
        "data": "{\"value\":\"\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 560,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "521f3898fc1f46dd",
        "type": "http in",
        "z": "be9302db5cc86901",
        "name": "",
        "url": "/flow_1/hello",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 420,
        "wires": [
            [
                "b3732fa3cf5b1843"
            ]
        ]
    },
    {
        "id": "e1e83eaa85b0e273",
        "type": "http response",
        "z": "be9302db5cc86901",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 900,
        "y": 420,
        "wires": []
    },
    {
        "id": "b3732fa3cf5b1843",
        "type": "change",
        "z": "be9302db5cc86901",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "homeassistant",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 340,
        "wires": [
            [
                "e1e83eaa85b0e273",
                "1371401ef1098820"
            ]
        ]
    },
    {
        "id": "1371401ef1098820",
        "type": "debug",
        "z": "be9302db5cc86901",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 420,
        "wires": []
    },
    {
        "id": "d0e69ca1fb33587f",
        "type": "chatbot-telegram-receive",
        "z": "5696f54716e2d43c",
        "bot": "d1d223ae7f73128c",
        "botProduction": "",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "aaa2a5dff6a87c09",
                "3a09f926213586a6"
            ]
        ]
    },
    {
        "id": "aaa2a5dff6a87c09",
        "type": "debug",
        "z": "5696f54716e2d43c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 440,
        "wires": []
    },
    {
        "id": "482a229702a131ab",
        "type": "switch",
        "z": "5696f54716e2d43c",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/gpt start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/gpt stop",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "34df10fb7e00e120"
            ],
            [
                "dd2f6c5c07a34a71"
            ],
            [
                "c5167ff5a46eb34b"
            ]
        ]
    },
    {
        "id": "c03b2cad7485e143",
        "type": "switch",
        "z": "5696f54716e2d43c",
        "name": "",
        "property": "is_running",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 820,
        "wires": [
            [],
            [
                "7f660efb3f1d9236"
            ]
        ]
    },
    {
        "id": "7f660efb3f1d9236",
        "type": "change",
        "z": "5696f54716e2d43c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "is_running",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "6eb92626351cb793",
        "type": "credentials",
        "z": "5696f54716e2d43c",
        "name": "api_keys",
        "props": [
            {
                "value": "openapi_key",
                "type": "msg"
            }
        ],
        "x": 940,
        "y": 280,
        "wires": [
            [
                "169c0b0bbedaac8f"
            ]
        ]
    },
    {
        "id": "702c22b2165e2fd4",
        "type": "function",
        "z": "5696f54716e2d43c",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\nlet keep_history = global.get(\"homeassistant\").homeAssistant.states[\"input_boolean.gpt_history\"].state\nlet history = flow.get(\"history\")\nif (keep_history == \"off\" || !history){\n    history = [\n        { role: \"system\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_system_prompt\"].state },\n        { role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state }\n    ]\n} else {\n    if (history) {\n        history.push({ role: \"user\", content: global.get(\"homeassistant\").homeAssistant.states[\"input_text.gpt_instructions\"].state })\n    }\n}\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry{\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history\n    });\n\n    history.push(completion.data.choices[0].message)\n    flow.set(\"history\", history)\n    node.status({});\n    msg.history = history\n    msg.keep_history = keep_history\n    msg.completion = completion    \n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 890,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "34df10fb7e00e120",
        "type": "function",
        "z": "5696f54716e2d43c",
        "name": "create session",
        "func": "let gpt_session = flow.get(msg.payload.userId)\n\ngpt_session = true\n\nflow.set(msg.payload.userId, gpt_session)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "223a1785d6af5509"
            ]
        ]
    },
    {
        "id": "dd2f6c5c07a34a71",
        "type": "function",
        "z": "5696f54716e2d43c",
        "name": "destroy session",
        "func": "flow.set(msg.payload.userId, null)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "edf8d4cb21432ace",
        "type": "chatbot-telegram-send",
        "z": "5696f54716e2d43c",
        "bot": "36d5ada22c971958",
        "botProduction": "",
        "track": false,
        "passThrough": true,
        "errorOutput": false,
        "outputs": 1,
        "x": 1270,
        "y": 100,
        "wires": [
            [
                "92974aa8258f8ddf"
            ]
        ]
    },
    {
        "id": "92974aa8258f8ddf",
        "type": "debug",
        "z": "5696f54716e2d43c",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 180,
        "wires": []
    },
    {
        "id": "b741cfbc572cdc11",
        "type": "chatbot-message",
        "z": "5696f54716e2d43c",
        "name": "gptbyeonbot",
        "message": [
            {
                "message": "Session started"
            }
        ],
        "language": "none",
        "x": 990,
        "y": 180,
        "wires": [
            [
                "edf8d4cb21432ace"
            ]
        ]
    },
    {
        "id": "223a1785d6af5509",
        "type": "chatbot-authorized",
        "z": "5696f54716e2d43c",
        "x": 810,
        "y": 180,
        "wires": [
            [
                "b741cfbc572cdc11"
            ],
            []
        ]
    },
    {
        "id": "3a09f926213586a6",
        "type": "chatbot-authorized",
        "z": "5696f54716e2d43c",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "482a229702a131ab"
            ],
            []
        ]
    },
    {
        "id": "c5167ff5a46eb34b",
        "type": "function",
        "z": "5696f54716e2d43c",
        "name": "set session",
        "func": "let gpt_session = flow.get(msg.payload.userId)\n \nif (gpt_session){\n    msg.session = msg.payload.userId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 320,
        "wires": [
            [
                "f9e0d2aea06cbdc1",
                "179dae68af224437"
            ]
        ]
    },
    {
        "id": "f9e0d2aea06cbdc1",
        "type": "switch",
        "z": "5696f54716e2d43c",
        "name": "",
        "property": "session",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 320,
        "wires": [
            [
                "6eb92626351cb793"
            ],
            [
                "9fc68f6da806636c"
            ]
        ]
    },
    {
        "id": "169c0b0bbedaac8f",
        "type": "function",
        "z": "5696f54716e2d43c",
        "name": "openai",
        "func": "const configuration = new oai.Configuration({\n    apiKey: msg.openapi_key,\n});\n\n\n\n\nconst openai = new oai.OpenAIApi(configuration);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Querying openapi...\" });\n\ntry {\n\n    let history = flow.get(\"history\")\n\n    if (!history[msg.session]) {\n        history = [\n            { role: \"system\", content: \"You are a helpful assistant\" },\n            { role: \"user\", content: msg.payload.content }\n        ]\n    } else {\n        history[msg.session].push({ role: \"user\", content: msg.payload.content })\n    }\n\n    const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: history\n    });\n\n    history.push(completion.data.choices[0].message)\n    msg.message = completion.data.choices[0].message\n    flow.set(\"history\", history)\n    node.status({});\n    msg.completion = completion\n} catch (error) {\n    if (error.response) {\n        msg.error_status = error.response.status\n        msg.error_data = error.response.data\n    } else {\n        msg.error_message = error.message\n    }\n}\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "oai",
                "module": "openai"
            }
        ],
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "fa5973b3866ea2af"
            ]
        ]
    },
    {
        "id": "fa5973b3866ea2af",
        "type": "chatbot-message",
        "z": "5696f54716e2d43c",
        "name": "gptbyeonbot",
        "message": [
            {
                "message": ""
            }
        ],
        "language": "none",
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "edf8d4cb21432ace"
            ]
        ]
    },
    {
        "id": "9fc68f6da806636c",
        "type": "chatbot-message",
        "z": "5696f54716e2d43c",
        "name": "gptbyeonbot",
        "message": [
            {
                "message": "No session running. Type `/gpt start` to get started"
            }
        ],
        "language": "none",
        "x": 950,
        "y": 360,
        "wires": [
            [
                "edf8d4cb21432ace"
            ]
        ]
    },
    {
        "id": "179dae68af224437",
        "type": "debug",
        "z": "5696f54716e2d43c",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 400,
        "wires": []
    }
]